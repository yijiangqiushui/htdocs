<?php/** * cloneRow() * * Copyright (c) 2013 Platonov Pavel (http://www.leng.ru) * * Extension for PHPWord_Template * New public method cloneRow() for clone rows in tables * * * @category   PHPWord Extension * @copyright  Copyright (c) 2013 Platonov Pavel (http://www.leng.ru) * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt    LGPL * @version    Beta 0.2, 25.12.2013 * * * modified method setValue() * new pattern for replace: {MyPattern} * fixed problem with tags inside pattern: "{<tags...>My<tags...>Pattern<tags...>}" * * Copyright (c) 2013 Platonov Pavel (http://www.leng.ru) * * * PHPWord * * Copyright (c) 2011 PHPWord * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA * * @category   PHPWord * @package    PHPWord * @copyright  Copyright (c) 010 PHPWord * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt    LGPL * @version    Beta 0.6.3, 08.07.2011 *//** * PHPWord_DocumentProperties * * @category   PHPWord * @package    PHPWord * @copyright  Copyright (c) 2009 - 2011 PHPWord (http://www.codeplex.com/PHPWord) */class PHPWord_Template {	/**	* ZipArchive	*	* @var ZipArchive	*/	private $_objZip;	private $_header1XML;	private $_footer1XML;	private $_rels;	private $_types;	private $_countRels;	/**	* Temporary Filename	*	* @var string	*/	private $_tempFileName;	/**	* Document XML	*	* @var string	*/	private $_documentXML;	/**	* Create a new Template Object	*	* @param string $strFilename	*/	public function __construct($strFilename) {		$path = dirname($strFilename);		$this->_tempFileName = $path . DIRECTORY_SEPARATOR . time() . '.docx'; // $path doesn't include the trailing slash - Custom code by Matt Bowden (blenderstyle) 04/12/2011		copy($strFilename, $this->_tempFileName); // Copy the source File to the temp File		$this->_objZip = new ZipArchive();		$this->_objZip->open($this->_tempFileName);		$this->_documentXML = $this->_objZip->getFromName('word/document.xml');		$this->_header1XML  = $this->_objZip->getFromName('word/header1.xml'); // Custom code by Matt Bowden (blenderstyle) 04/12/2011		$this->_footer1XML  = $this->_objZip->getFromName('word/footer1.xml'); // Custom code by Matt Bowden (blenderstyle) 04/12/2011		$this->_rels        = $this->_objZip->getFromName('word/_rels/document.xml.rels'); #erap 07/07/2015		$this->_types       = $this->_objZip->getFromName('[Content_Types].xml'); #erap 07/07/2015		$this->_countRels   = substr_count($this->_rels, 'Relationship') - 1; #erap 07/07/2015	}	/**	* Set a Template value	*	* @param mixed $search	* @param mixed $replace	*/	public function setValue($search, $replace, $limit=-1) {		if(substr($search, 0, 1) !== '{' && substr($search, -1) !== '}') {			$search = '{'.$search.'}';		}		$replace = htmlspecialchars($replace);		$replace = preg_replace('~(*BSR_ANYCRLF)\R~', '<w:br/>    ', $replace);		preg_match_all('/\{[^}]+\}/', $this->_documentXML, $matches);		foreach ($matches[0] as $k => $match) {			$no_tag = strip_tags($match);			if ($no_tag == $search) {				$match = '{'.$match.'}';				$this->_documentXML = preg_replace($match, $replace, $this->_documentXML, $limit);					if ($limit == 1) {					break;				}						}		}	}	public function setValueOrigin($search, $replace, $limit=-1) {		if(substr($search, 0, 1) !== '{' && substr($search, -1) !== '}') {			$search = '{'.$search.'}';		}		// $replace = htmlspecialchars($replace);		//$replace = preg_replace('~(*BSR_ANYCRLF)\R~', '<w:br/>    ', $replace);		preg_match_all('/\{[^}]+\}/', $this->_documentXML, $matches);		foreach ($matches[0] as $k => $match) {			$no_tag = strip_tags($match);			if ($no_tag == $search) {				$match = '{'.$match.'}';				$this->_documentXML = preg_replace($match, $replace, $this->_documentXML, $limit);				if ($limit == 1) {					break;				}			}		}	}	public function clearTemplate($search, $replace, $limit=-1) {		if(substr($search, 0, 1) !== '{' && substr($search, -1) !== '}') {			$search = '{'.$search.'}';		}		preg_match_all('/\{[^}]+\}/', $this->_documentXML, $matches);		foreach ($matches[0] as $k => $match) {			$no_tag = strip_tags($match);				$match = '{'.$match.'}';				$this->_documentXML = preg_replace($match, $replace, $this->_documentXML, $limit);				if ($limit == 1) {					break;				}		}	}	/**	* Save Template	*	* @param string $strFilename	*/	/*	public function save($strFilename) {		if(file_exists($strFilename)) {			unlink($strFilename);		}		$this->_objZip->addFromString('word/document.xml', $this->_documentXML);		// Close zip file		if($this->_objZip->close() === false) {			throw new Exception('Could not close zip file.');		}		rename($this->_tempFileName, $strFilename);	}*/	public function save($strFilename) {		if (file_exists($strFilename)) {			unlink($strFilename);		}				$this->_objZip->addFromString('word/document.xml', $this->_documentXML);		$this->_objZip->addFromString('word/header1.xml', $this->_header1XML); // Custom code by Matt Bowden (blenderstyle) 04/12/2011		$this->_objZip->addFromString('word/footer1.xml', $this->_footer1XML); // Custom code by Matt Bowden (blenderstyle) 04/12/2011		$this->_objZip->addFromString('word/_rels/document.xml.rels', $this->_rels); #erap 07/07/2015		$this->_objZip->addFromString('[Content_Types].xml', $this->_types); #erap 07/07/2015		// Close zip file		if ($this->_objZip->close() == false) {			throw new Exception('Could not close zip file.');		}// 		var_dump($this->_objZip->close());// 		exit();		rename($this->_tempFileName, $strFilename);	}	public function replaceImage($path, $imageName) {		$this->_objZip->deleteName('word/media/' . $imageName);		$this->_objZip->addFile($path, 'word/media/' . $imageName);	}//用于替换模板中的图片	public function replaceStrToImg( $strKey, $arrImgPath ){		if( !is_array($arrImgPath) )			$arrImgPath = array($arrImgPath);		$relationTmpl = '<Relationship Id="RID" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="media/IMG"/>';		$imgNextLine = '<w:p w:rsidR="00467A86" w:rsidRDefault="00467A86"/>';		$imgName=$imgNextLine.'<w:p w:rsidR="00D20602" w:rsidRDefault="00D20602">								<w:r>								<w:rPr>								<w:rFonts w:hint="eastAsia"/>								</w:rPr>								<w:t>{imageName}</w:t>								</w:r>								</w:p>';		$imgIntroduce=$imgName.'<w:p w:rsidR="00D20602" w:rsidRDefault="00D20602">								<w:r>								<w:rPr>								<w:rFonts w:hint="eastAsia"/>								</w:rPr>								<w:t>介绍：{imgIntroduce}</w:t>								</w:r>								</w:p>'.						'<w:p w:rsidR="00D20602" w:rsidRDefault="00D20602">								<w:r>								<w:rPr>								<w:rFonts w:hint="eastAsia"/>								</w:rPr>								<w:t>图片：</w:t>								</w:r>								</w:p>';		$imgTmpl =$imgIntroduce. '<w:pict><v:shape type="#_x0000_t75" style="width:400px;height:300px"><v:imagedata r:id="RID" o:title=""/></v:shape></w:pict>';		$imgTmpl .= $imgNextLine;		$typeTmpl = ' <Override PartName="/word/media/IMG" ContentType="image/EXT"/>';		$toAdd = $toAddImg = $toAddType = '';		$aSearch = array('RID', 'IMG');		$aSearchType = array('IMG', 'EXT');		foreach($arrImgPath as $img){			$imgExt = array_pop( explode('.', $img) );			if( in_array($imgExt, array('jpg', 'JPG','png','PNG') ) )				$imgExt = 'jpeg';			$imgName = 'img' . $this->_countRels . '.' . $imgExt;			$rid = 'rId' . $this->_countRels++;// 			$this->_objZip->addFile($img, 'word/media/' . $imgName);            			$this->_objZip->addFile($img, 'word/media/' . $imgName);// 			$this->_objZip->close();// 			$this->_objZip->deleteName('word/media/' . $imageName);			$imgTmpl= str_replace('{imageName}', 'TEST', $imgTmpl);			$imgTmpl= str_replace('{imgIntroduce}', '中文介绍', $imgTmpl);			$toAddImg .= str_replace('RID', $rid, $imgTmpl);			$aReplace = array($imgName, $imgExt);			$toAddType .= str_replace($aSearchType, $aReplace, $typeTmpl) ;			$aReplace = array($rid, $imgName);			$toAdd .= str_replace($aSearch, $aReplace, $relationTmpl);		}		$this->setValueOrigin($strKey,$toAddImg);				$this->_types = str_replace('</Types>', $toAddType, $this->_types) . '</Types>';		$this->_rels = str_replace('</Relationships>', $toAdd, $this->_rels) . '</Relationships>';	}	//用于替换模板中的图片	public function replaceStrToImgV2( $strKey, $arrImgPath,$arrImgName,$arrImgIntroduce ){		if( !is_array($arrImgPath) )			$arrImgPath = array($arrImgPath);		$relationTmpl = '<Relationship Id="RID" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="media/IMG"/>';		$imgAttach = '<w:p w:rsidR="00857851" w:rsidRDefault="00857851" w:rsidP="00857851">						<w:pPr>						<w:rPr>						<w:b/>						<w:sz w:val="24"/>						</w:rPr>						</w:pPr>						<w:r w:rsidRPr="00C24292">						<w:rPr>						<w:rFonts w:hint="eastAsia"/>						<w:b/>						<w:sz w:val="24"/>						</w:rPr>						<w:t>附件{imgIndex}：</w:t>						</w:r>						</w:p>';		$imgNextLine = '<w:p w:rsidR="00467A86" w:rsidRDefault="00467A86"/>';		$imgTitle='<w:p w:rsidR="00467A86" w:rsidRPr="00857851" w:rsidRDefault="00857851" w:rsidP="00857851">								<w:r>								<w:rPr>								<w:rFonts w:hint="eastAsia"/>								</w:rPr>								<w:t>{imageName}</w:t>								</w:r>								</w:p>';		$imgIntroduce='<w:p w:rsidR="00467A86" w:rsidRPr="00857851" w:rsidRDefault="00857851" w:rsidP="00857851">								<w:r>								<w:rPr>								<w:rFonts w:hint="eastAsia"/>								</w:rPr>								<w:t>介绍：{imgIntroduce}</w:t>								</w:r>								</w:p>';		$imgNextPage = '<w:p w:rsidR="004B265D" w:rsidRDefault="004B265D"><w:pPr><w:widowControl /><w:jc w:val="left" /></w:pPr> <w:r><w:br w:type="page" /></w:r></w:p>';		$imgTmpl ='<w:pict><v:shape type="#_x0000_t75" style="width:{imageWidth}px;height:{imageHeight}px"><v:imagedata r:id="RID" o:title=""/></v:shape></w:pict>';		$typeTmpl = ' <Override PartName="/word/media/IMG" ContentType="image/EXT"/>';		$toAdd = $toAddImg = $toAddType = '';		$aSearch = array('RID', 'IMG');		$aSearchType = array('IMG', 'EXT');		$i=0;		foreach($arrImgPath as $key=>$img){			$imgExt = array_pop( explode('.', $img) );			if( in_array($imgExt, array('jpg', 'JPG','png','PNG') ) )				$imgExt = 'jpeg';			$imgName = 'img' . $this->_countRels . '.' . $imgExt;			$rid = 'rId' . $this->_countRels++;// 			$this->_objZip->addFile($img, 'word/media/' . $imgName);			//var_dump($img);exit;			$imageSize = getimagesize($img);			$imageSize = $this->getDocImageSize($imageSize,500);			$this->_objZip->addFile($img, 'word/media/' . $imgName);// 			$this->_objZip->close();// 			$this->_objZip->deleteName('word/media/' . $imageName);			$imgIntroduceTemp = $imgIntroduce;			if($arrImgIntroduce[$key]=="无"){				$imgIntroduceTemp = "";			}			//if($i==0){			//	$imgTemplate = $imgAttach.$imgTitle.$imgIntroduceTemp.$imgTmpl.$imgNextPage;			//}else{			$imgTemplate = $imgAttach.$imgTitle.$imgIntroduceTemp.$imgTmpl.$imgNextPage;			//}			$imageNameTemp = explode(".",$arrImgName[$key]);			$imgTemplate= str_replace('{imgIndex}', $key+1, $imgTemplate);			$imgTemplate= str_replace('{imageName}', $imageNameTemp[0], $imgTemplate);			$imgTemplate= str_replace('{imageWidth}', $imageSize[0], $imgTemplate);			$imgTemplate= str_replace('{imageHeight}', $imageSize[1], $imgTemplate);			$imgTemplate= str_replace('{imgIntroduce}', $arrImgIntroduce[$key], $imgTemplate);			$toAddImg .= str_replace('RID', $rid, $imgTemplate);			$aReplace = array($imgName, $imgExt);			$toAddType .= str_replace($aSearchType, $aReplace, $typeTmpl) ;			$aReplace = array($rid, $imgName);			$toAdd .= str_replace($aSearch, $aReplace, $relationTmpl);			$i++;		}		$this->setValueOrigin($strKey,$toAddImg);		$this->_types = str_replace('</Types>', $toAddType, $this->_types) . '</Types>';		$this->_rels = str_replace('</Relationships>', $toAdd, $this->_rels) . '</Relationships>';	}	/**	* Clone Rows in tables	*	* @param string $search	* @param array $data	*/	function getDocImageSize($size,$origin){		if($size[0]>=$origin){			$persent = $size[0]/$origin;			$size[0] = $origin;			$size[1] = $size[1]/$persent;		}		return $size;	}	public function cloneRow($search, $data=array()) {	 			// remove ooxml-tags inside pattern		foreach ($data as $nn => $fieldset) {			if(!empty($fieldset)){				foreach ($fieldset as $field => $val) {					$key = '{'.$search.'.'.$field.'}';					$this->setValue($key, $key, 1);				}			}		}		// how many clons we need		$numberOfClones = 0;		if (is_array($data)) {			foreach ($data as $colName => $dataArr) {				if (is_array($dataArr)) {					$c = count($dataArr);					if ($c > $numberOfClones)						$numberOfClones = $c;				}			}		}		if ($numberOfClones > 0) {			// read document as XML			$xml = DOMDocument::loadXML($this->_documentXML, LIBXML_NOENT | LIBXML_XINCLUDE | LIBXML_NOERROR | LIBXML_NOWARNING);			// search for tables			$tables = $xml->getElementsByTagName('tbl');			foreach ($tables as $table) {				$text = $table->textContent;				// search for pattern. Like {TBL1.				if (mb_strpos($text, '{'.$search.'.') !== false) {					// search row for clone					$patterns = array();					$rows = $table->getElementsByTagName('tr');					$isUpdate = false;					$isFind = false;					foreach ($rows as $row) {						$text = $row->textContent;						$TextWithTags = $xml->saveXML($row);						if (							mb_strpos($text, '{'.$search.'.') !== false // Pattern found in this row							OR							(mb_strpos($TextWithTags, '<w:vMerge/>') !== false AND $isFind) // This row is merged with upper row (Upper row have pattern)						)						{							// This row need to clone							$patterns[] = $row->cloneNode(true);							$isFind = true;						} else {							// This row don't have any patterns. It's table header or footer							if (!$isUpdate and $isFind) {								// This is table footer								// Insert new rows before footer																$this->InsertNewRows($table, $patterns, $row, $numberOfClones);								$isUpdate = true;							}						}					}					// if table without footer										if (!$isUpdate and $isFind) {						$this->InsertNewRows($table, $patterns, $row, $numberOfClones);					}				}			}			// save document			$res_string = $xml->saveXML();			$this->_documentXML = $res_string;				// parsing data			foreach ($data as $colName => $dataArr) {				$pattern = '{' . $search . '.' . $colName . '}';				foreach ($dataArr as $value) {					$this->setValue($pattern, $value, 1);				}			}		}	}		/**	* Insert new rows in table	*	* @param object &$table	* @param object $patterns	* @param object $row	* @param int $numberOfClones	*/	protected function InsertNewRows(&$table, $patterns, $row, $numberOfClones)	{		for ($i = 1; $i < $numberOfClones; $i++) {			foreach ($patterns as $pattern) {				$new_row = $pattern->cloneNode(true);				$table->insertBefore($new_row, $row);			}		}	}}?>